<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PX4 的参数</title>
    <link href="/2023/03/09/page/"/>
    <url>/2023/03/09/page/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文是学习 <a href="https://px4.io/blog/">PX4 Blog</a> 中，PX4Deep-Dive 系列里 <ahref="https://px4.io/px4-parameters-part-1-overview/">PX4 ParametersPart 1: Overview</a> 和 <ahref="https://px4.io/px4-parameters-part-2-in-depth-guide/">PX4Parameters Part 2: In-Depth Guide</a>的翻译和学习笔记</p></blockquote><h1 id="参数是什么">参数是什么？</h1><p>PX4 开发团队成员 Matthias Grob说：“参数是一种配置选项。这种配置选项可以在运行系统中更改，而无需重新编译系统。”</p><blockquote><p>A configuration option that you can change within the running system,without having to recompile it.</p></blockquote><p>控制一个机器人移动，如果需要修改机器人的移动速度，在使用<strong>参数</strong>的情况下，只需要更新速度的相关参数值，就可以完成对机器人速度的修改。</p><p>在PX4中，参数的作用与此类似，甚至可以修改系统更重大的变化（比如参数<code>SYS_AUTOSTART</code> 可以修改车辆类型）。</p><h1 id="参数的命名规范">参数的命名规范</h1><h2 id="简要分析">简要分析</h2><p>以 <code>BAT1_N_CELLS</code>、<code>MPC_XY_VEL_MAX</code> 和<code>RC_MAP_ARM_SW</code> 为例，简要分析 PX4 参数的命名规范：</p><h3 id="bat1_n_cells"><code>BAT1_N_CELLS</code></h3><ul><li>这是 Battery1 Number Cells 的缩写</li><li>这个参数定义了<strong>电池组1</strong>（Battery1）内<strong>电池单体</strong>（Cells）的数量。PX4支持多个电池组，电池组1 是主电池组。</li><li>多个电池单体（Cells）构成一个电池组（Battery），PX4允许1-16个Cells组成一个Battery，因此<code>BAT1_N_CELLS</code>的取值为1-16之间的整数。</li><li><ahref="https://github.com/PX4/PX4-Autopilot/blob/54f2e91775013a2138ea609a87cc0177f0bb3a18/src/drivers/batt_smbus/batt_smbus.cpp#L369">具体代码</a></li></ul><h3 id="mpc_xy_vel_max"><code>MPC_XY_VEL_MAX</code></h3><ul><li>这是 MultiCopter Position Controller XY Velocity MAX的缩写</li><li><code>MPC</code>，即多旋翼位置控制器（MultiCopter PositionController），这三个字母下的参数，是与控制各种旋翼（包括直升机，四旋翼等）的位置有关。<ahref="https://docs.px4.io/main/en/flight_stack/controller_diagrams.html#multicopter-position-controller">这里是官网中具体关于MPC的介绍。</a></li><li><code>XY_VEL</code>，表示X轴和Y轴组成平面上的速度的分量。也就是<ahref="https://docs.px4.io/main/en/config/flight_controller_orientation.html#calculating-orientation">飞机水平面</a>上的速度。</li><li>因此这个参数定义了多旋翼控制器的最大水平速度。修改这个参数，就可以修改多旋翼在<ahref="https://docs.px4.io/main/en/config_mc/mc_jerk_limited_type_trajectory.html#auto-mode">自动模式</a>下最大的水平方向的速度大小。</li><li>根据<ahref="https://docs.px4.io/main/en/advanced_config/parameter_reference.html#MPC_XY_VEL_MAX">官网定义</a>可知，该参数类型为浮点数，取值范围[0.0,20.0]，默认值为12.0，单位m/s。</li></ul><h3 id="rc_map_arm_sw"><code>RC_MAP_ARM_SW</code></h3><ul><li>Radio Control Map ARM Switch</li><li><code>RC</code>，即无线电控制器（RadioControl），接收遥控器参数控制无人机。遥控器发送出的每一种命令，比如油门、滚转等，都对应一个特定的<code>RC</code>通道。根据遥控器的不同，RC通道的数目也不同，最少为4个RC通道，最多为18个。</li><li><code>ARM</code>，表示是否可以启动电机，并开始飞行。如果无人机armed，那么无人机就可以启动电机飞行；如果无人机处于disarmed，则不允许电机旋转。</li><li><code>Switch</code>，用来表示哪一个<code>RC</code>通道用来控制无人机是否<code>ARM</code>。因此<code>Switch</code>为0-18的整数。</li></ul><p>下面介绍 PX4 参数的具体要求。在<ahref="https://docs.px4.io/main/en/advanced_config/parameter_reference.html">这里</a>可以找到PX4 中所有参数的说明。</p><h2 id="参数的类型">参数的类型</h2><p>有<strong>整型</strong>和<strong>浮点型</strong>两种。所有可以用整数来描述的参数，都是整型；任何需要小数描述的参数，都是浮点型。</p><h2 id="参数的存储位置">参数的存储位置</h2><p>参数存储在微控制器 MCU的<strong>持久存储</strong>中，类似于飞行控制器的硬盘（HardDisk）。PX4每次启动时都会从存储中读取，即使处理器断电，也会保留这些参数值。持久存储很有必要，因为如果每次重新启动时，参数都被重置为默认值，会很麻烦。</p><h2 id="参数名称的限制">参数名称的限制</h2><p>参数名称最长不超过16个字符，通常使用缩写。</p><h2 id="有效范围和默认值">有效范围和默认值</h2><p>每个参数都有其有效范围和默认值。参数的有效范围和默认值都是在PX4的源代码中硬编码（hard-coded）的。</p><p>参数的取值可以超出有效范围，通过QGC中的额外警告复选框强制设置参数为某值，但是该值不能超过参数的使用范围，否则该值不会被使用。</p><p>比如之前提到过的 <code>MPC_XY_VEL_MAX</code> 参数。取值范围为[0.00m/s, 20.00m/s]，但是也可以设置超出这个范围的值。</p><p>同时，点击<strong>Reset ToDefault</strong>，可以将该参数设置为默认值12m/s，默认值也是硬编码。默认值在大多数场景下表现良好。</p><h2 id="源代码中的参数元数据-parameter-metadata">源代码中的参数元数据Parameter Metadata</h2><p>参数的使用范围和默认值是从哪里来的？</p><p>首先，参数的使用范围和默认值，这些属性称为 "<strong>元数据Metadata</strong>"。元数据直接定义在<strong>源代码</strong>中，每次变化都会<strong>自动更新</strong>并应用到QGC和PX4用户文档中。这也是PX4最独特的功能之一。</p><p><strong>以 <code>MPC_XY_VEL_MAX</code>参数为例，介绍参数是如何定义的</strong></p><p>首先找到MPC_XY_VEL_MAX参数在源代码中的位置。它位于<ahref="https://github.com/PX4/PX4-Autopilot/blob/10ceea2fe6a5d52462de45e9eea2863ce8bd04df/src/modules/mc_pos_control/mc_pos_control_params.c#L344">src/modules/mc_pos_control/mc_pos_control_params.c</a>中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Maximum horizontal velocity</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Maximum horizontal velocity in AUTO mode. If higher speeds</span><br><span class="hljs-comment"> * are commanded in a mission they will be capped to this velocity.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @unit m/s</span><br><span class="hljs-comment"> * @min 0.0</span><br><span class="hljs-comment"> * @max 20.0</span><br><span class="hljs-comment"> * @increment 1</span><br><span class="hljs-comment"> * @decimal 2</span><br><span class="hljs-comment"> * @group Multicopter Position Control</span><br><span class="hljs-comment"> */</span><br>PARAM_DEFINE_FLOAT(MPC_XY_VEL_MAX, <span class="hljs-number">12.0f</span>);<br></code></pre></td></tr></table></figure><p><code>PARAM_DEFINE_FLOAT</code>前的<strong>注释</strong>是重点要关注的内容。它包括该参数所需要定义的所有内容，每一项都由一个@标记占一行。</p><ul><li><code>@unit m/s</code>定义了米/秒作为QGC中显示的单位</li><li><code>@min 0.0</code> 和 <code>@max 20.0</code>表示该参数的最小值和最大值</li><li><code>@increment 1</code> 表示增量是1</li><li><code>@decimal 2</code>表示精确到小数点后第2位，因此可以设置为12.43这样的值</li><li><code>@group Multicopter Position Control</code>表示该参数是属于MPC这一组</li></ul><p>此外，还可以使用 <code>@reboot_required</code>标志定义该参数是否需要强制重启完成改变。该参数没有使用该标志，说明修改该参数不需要重新启动。</p><p><ahref="https://docs.px4.io/main/en/advanced/parameters_and_configurations.html">详细信息</a></p><h2 id="特别的修改后需重启">特别的：修改后需重启</h2><p>由于PX4中一个参数的变化，可能会影响其他参数。为了确保系统关键参数在整个系统中正确应用，一些参数需要重新启动才能使其值的变化生效。可以通过QGroundControl 中的 "参数Parameters" 选项卡检查。</p><figure><img src="/img/PX4Parameters/RebootRequirement.png"alt="参数 BAT1_A_PER_V 需要重启生效" /><figcaption aria-hidden="true">参数 BAT1_A_PER_V需要重启生效</figcaption></figure><h1 id="参数库">参数库</h1><p><strong>参数库 Parameter Library</strong> 定义了 PX4参数系统中最基本的参数数据结构。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Parameter handle.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Parameters are represented by parameter handles, which can</span><br><span class="hljs-comment"> * be obtained by looking up parameters. They are an offset into a global</span><br><span class="hljs-comment"> * constant parameter array.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">uint16_t</span><span class="hljs-type">param_t</span>;<br></code></pre></td></tr></table></figure><p>在源代码<ahref="https://github.com/PX4/PX4-Autopilot/blob/e1f2bff9be501d853f109963bf03eb294efbbedc/src/lib/parameters/param.h#L73">src/lib/parameters/param.h</a>中可以看到，参数句柄<code>param_t</code> 是一个 <code>uint16_t</code>，即16位的无符号整数。<strong>句柄 handle</strong>用于存储编译时生成的参数数组 parameter array 中的偏移量 offset。</p><p>大多数情况下，都是通过函数句柄，在源代码中引用特定参数。例如在<ahref="https://github.com/PX4/PX4-Autopilot/blob/e1f2bff9be501d853f109963bf03eb294efbbedc/src/lib/parameters/parameters.cpp#L389">src/lib/parameters/parameters.cpp</a>中，有如下函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">param_name</span><span class="hljs-params">(<span class="hljs-type">param_t</span> param)</span><br>&#123;<br><span class="hljs-keyword">return</span> handle_in_range(param) ? px4::parameters[param].name : nullptr;<br>&#125;<br></code></pre></td></tr></table></figure><p>该函数输入参数句柄，检查该句柄是否在有效范围内。如果在，就通过访问<code>px4::parameters</code>中句柄值来返回名称；否则返回空指针。</p><!-- # 编译时生成的参数数组和句柄构建目标时，将生成px4::params句柄和px4::parameters数组。其中包括您正在构建的目标所需的所有必要参数。该数组由每个参数的名称和默认值组成。正如已经提到的，参数只是数组中的偏移量。因此它们被定义为枚举类型，意味着值从0开始分配，并逐个增加。您可以通过“px4::params::<param_name>”访问它们。由于它们属于px4命名空间，在params类中。 -->]]></content>
    
    
    
    <tags>
      
      <tag>PX4</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
